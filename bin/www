#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('fugle:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const WebSocket = require('ws').Server;
const WebSocketClient = require('ws');
const wss = new WebSocket({server});

wss.on('connection', (ws, req) => {
  console.log('Client connected')
  ws.send('connection success!!!')

  ws.on('message', function message(data) {
    data = data.toString();
    data = JSON.parse(data);
    const event = data.event;

    switch (event) {
      case "bts:subscribe":
        subscribe(data, ws)
      break;
      case "bts:unsubscribe":
        unsubscribe(data, ws)
      break;
      default:
        console.warn(`event: ${event} unknown`);
        ws.send("wrong event QQ")
      break;
    }


    function subscribe(data, ws) {
      let socket = new WebSocketClient("wss://ws.bitstamp.net");
      let currency_pair = data.data.channel.split('_')[2];

      fetch(`https://www.bitstamp.net/api/v2/ohlc/${currency_pair}/?step=60&limit=1`)
      .then((response) => response.json())
      .then((response) => {
        let ohlc = response.data.ohlc[0];

        const data = {
          currency: response.data.pair,
          open: ohlc.open,
          close: ohlc.close,
          high: ohlc.high,
          low: ohlc.low
        }
        
        ws.send(JSON.stringify(data))
      })
      .catch(err => {
        console.log(err)
      })

      socket.on('error', console.error);

      socket.on('open', () => {
        socket.send(JSON.stringify(data));
      });

      socket.on('message', (btsData) => {
        const result = JSON.parse(btsData);
        if (result.event == 'trade') {
          ws.send(JSON.stringify({
            currency: data.data.channel,
            price: JSON.parse(btsData).data.price
          }))
        } else if (result.event == 'bts:subscription_succeeded') {
          ws.send(JSON.stringify({
            message: `Channel ${data.data.channel} subscribe!`
          }))
        }
      });
    }


    function unsubscribe(data, ws) {
      let socket = new WebSocketClient("wss://ws.bitstamp.net");

      socket.on('error', console.error);

      socket.on('open', () => {
        socket.send(JSON.stringify(data));
      });

      socket.on('message', (btsData) => {
        const result = JSON.parse(btsData)
        if (result.event == 'bts:unsubscription_succeeded') {
          ws.send(JSON.stringify({
            message: `Channel ${data.data.channel} unsubscribe`
          }))
        }
      });
    }
  });

})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
